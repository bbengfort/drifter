#!/usr/bin/env python
# drifter
# Executable script to run drifter commands
#
# Author:   Benjamin Bengfort <benjamin@bengfort.com>
# Created:  Tue Jun 10 10:03:47 2014 -0400
#
# Copyright (C) 2014 Bengfort.com
# For license information, see LICENSE.txt
#
# ID: drifter [] benjamin@bengfort.com $

"""
Executable script to run drifter commands
"""

##########################################################################
## Imports
##########################################################################

import sys
import drifter
import argparse
import traceback

##########################################################################
## Module Constants
##########################################################################

VERSION     = "1.0"
DESCRIPTION = "Run drifter commands against the Phoenix-API"
EPILOG      = "This software is for internal test use only."

##########################################################################
## Functional commands
##########################################################################

def show_config(args):
    return str(drifter.settings)

def runner(args):
    print ("Executing drifter on the following endpoints:\n"
           "    GET /categories\n"
           "    GET /brands\n"
           "    GET /sizes\n")

    runner = drifter.Runner(args.runs, wait=args.wait)
    _, timec = runner.categories_runner()
    _, timeb = runner.brands_runner()
    _, times = runner.sizes_runner()

    print "\nDrifter complete!"

    if args.outfile: runner.dump(args.outfile)

    for label, stats in runner.statistics().items():
        print "Statistics for the %s runner:" % label
        for stat, val in stats.items():
            print "    %s: %0.3f" % (stat.title(), val)

    runner.display()
    return "Runner took %0.3f seconds to execute %i runs" % (sum((timec, timeb, times)), args.runs*3)

##########################################################################
## Main Method and functionality
##########################################################################

def main(*argv):
    """
    Handles command line input and executes functionality.
    """

    # The parent parser includes the traceback flag
    pyparser   = argparse.ArgumentParser(add_help=False)
    pyparser.add_argument('--traceback', action='store_true', default=False, help='On error, show the Python traceback')

    # Setup the main parser and subparsers
    parser     = argparse.ArgumentParser(version=VERSION, description=DESCRIPTION, epilog=EPILOG)
    subparsers = parser.add_subparsers(title='commands', description='Administrative commands for Drifter')

    # Show config command
    conf_parser = subparsers.add_parser('config', help='Show the current configuration of Drifter', parents=[pyparser])
    conf_parser.set_defaults(func=show_config)

    # Runner command
    runner_parser = subparsers.add_parser('run', help='Run a command on the specified endpoints', parents=[pyparser])
    runner_parser.add_argument('-n', default=100, dest='runs', type=int, help='Number of runs to execute the runner on')
    runner_parser.add_argument('-w', '--wait', default=None, type=float, help='Wait in seconds between each query.')
    runner_parser.add_argument('-o', '--outfile', default=None, type=argparse.FileType('w'), help='Dump results data to a file.')
    runner_parser.set_defaults(func=runner)

    # Handle input from the command line
    args = parser.parse_args()            # Parse the arguments
    try:
        msg = "%s\n" % args.func(args)    # Call the default function
        parser.exit(0, msg)               # Exit clearnly with message
    except Exception as e:
        if hasattr(args, 'traceback') and args.traceback:
            traceback.print_exc()
        parser.error(str(e))              # Exit with error

if __name__ == '__main__':
    main(*sys.argv)
